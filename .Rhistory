library(tidyr, warn.conflicts=FALSE, quietly=TRUE)
library(readr, warn.conflicts=FALSE, quietly=TRUE)
library(dplyr, warn.conflicts=FALSE, quietly=TRUE)
mock <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
mock
?cosine
??cosine
library(sos)
install.packages("sos")
library(sos)
install.packages("brew")
install.packages("sos")
library('sos')
sim  <- matrix(NA,
nrow = ncol(mock),
ncol = ncol(mock),
dimnames = list(colnames(mock),colnames(mock))
)
sim
mock <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
mock
mock <- subset(mock, select = -user)
sim  <- matrix(NA,
nrow = ncol(mock),
ncol = ncol(mock),
dimnames = list(colnames(mock),colnames(mock))
)
sim
View(sim)
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
}
}
getCos <- function(x, y)
return (sum(x * y) / (sqrt(sum(x * x)) * sqrt(sum(y * y))))
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
}
}
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
}
}
# load mock CF data
mock <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
# # lo
# remove user column
mock <- subset(mock, select = -user)
# initialize item-item similarity matrix
sim  <- matrix(NA,
nrow = ncol(mock),
ncol = ncol(mock),
dimnames = list(colnames(mock),colnames(mock))
)
# Lets fill in those empty spaces with cosine similarities
# Loop through the columns
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
}
}
sim <- as.data.frame(sim)
View(sim)
sim2  <- matrix(NA,
nrow = ncol(mock),
ncol = ncol(mock),
dimnames = list(colnames(mock),colnames(mock))
)
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
# sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
sim2[i,j] <- mock[i] %*% mock[j] / sqrt(mock[i]%*%mock[i] * mock[j]%*%mock[j])
}
}
mock <- as.matrix(mock)
# Loop through the columns
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
# sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
sim2[i,j] <- mock[i] %*% mock[j] / sqrt(mock[i]%*%mock[i] * mock[j]%*%mock[j])
}
}
sim2 <- as.data.frame(sim2)
View(sim2)
View(sim)
View(mock)
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
# sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
sim2[i,j] <- mock[i] %*% mock[j] / sqrt(mock[i]%*%mock[i] * mock[j]%*%mock[j])
}
}
View(sim2)
mock <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
mock <- subset(mock, select = -user)
mock <- as.matrix(mock)
for(i in 1:ncol(mock)) {
# Loop through the columns for each column
for(j in 1:ncol(mock)) {
# Fill in placeholder with cosine similarities
# sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
sim2[i,j] <- mock[,i] %*% mock[,j] / sqrt(mock[,i] %*% mock[,i] * mock[,j] %*% mock[,j])
}
}
View(sim2)
sim <- as.data.frame(sim)
mock <- as.data.frame(mock)
rm(sim2)
# load mock CF data
mock <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
# remove user column
mock <- subset(mock, select = -user)
# initialize item-item similarity matrix
sim  <- matrix(NA,
nrow = ncol(mock),
ncol = ncol(mock),
dimnames = list(colnames(mock),colnames(mock))
)
mock <- as.matrix(mock)
# look through all column vectors and perform euclidean dot product
for(i in 1:ncol(mock)) {
for(j in 1:ncol(mock)) {
# sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
sim[i,j] <- mock[,i] %*% mock[,j] / sqrt(mock[,i] %*% mock[,i] * mock[,j] %*% mock[,j])
}
}
# convert to dataframe
mock <- as.data.frame(mock)
sim <- as.data.frame(sim)
View(sim)
users.rec <- matrix(NA,
nrow = ncol(sim),
ncol = 5,
dimnames = list(colnames(sim)))
for(i in 1:ncol(mock))
users.rec[i,] <- (t(head(n = 11,rownames(sim[order(sim[,i],decreasing=TRUE),][i]))))
users.rec <- matrix(NA,
nrow = ncol(sim),
ncol = 5,
dimnames = list(colnames(sim)))
for(i in 1:ncol(mock))
users.rec[i,] <- (t(head(n = 5,rownames(sim[order(sim[,i],decreasing=TRUE),][i]))))
View(users.rec)
users.rec <- matrix(NA,
nrow = ncol(sim),
ncol = 8,
dimnames = list(colnames(sim)))
for(i in 1:ncol(mock))
users.rec[i,] <- (t(head(n = 8,rownames(sim[order(sim[,i],decreasing=TRUE),][i]))))
?head
View(users.rec)
mock_full <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
holder <- matrix(NA,
nrow = nrow(mock_full),
ncol = ncol(mock_ful) - 1,
dimnames = list((mock_full$user), colnames(mock_full[-1])))
holder <- matrix(NA,
nrow = nrow(mock_full),
ncol = ncol(mock_full) - 1,
dimnames = list((mock_full$user), colnames(mock_full[-1])))
View(users.rec)
View(sim)
View(users.rec)
TOPITEMS <- 8
# initialize user similarity matrix for 7 closest neighbours
holder <- matrix(NA,
nrow = nrow(mock_full),
ncol = ncol(mock_full) - 1,
dimnames = list((mock_full$user), colnames(mock_full[-1])))
for(i in 1:nrow(holder)) { # loop users
for(j in 1:ncol(holder)) { # look items
# extract user and item name
user <- rownames(holder)[i]
item <- colnames(holder)[j]
# remove items that the user has already liked
if (as.integer(mock_full[mock_full$user == user, item]) == 1)
holder[i,j] <- ""
else {
# get top N similar items to the item
topN <- ((head(n = TOPITEMS, (sim[order(sim[, item], decreasing=TRUE),][item]))))
topN.names <- as.character(rownames(topN))
topN.sim <- as.numeric(topN[,1])
# drop first column vector (same as item, diagonal line on sim matrix)
topN.sim <- topN.sim[-1]
topN.names < -topN.names[-1]
# get all users for top N items
topN.likes <- mock_full[,c("user", topN.names)]
# filter for just the current user (in current row)
topN.userlikes <- topN.likes[topN.likes$user == user, ]
topN.userlikes <- as.numeric(topN.userlikes[!(names(topN.userlikes) %in% c("user"))])
# calculate score of items liked by users and top N items similar to item
holder[i,j] <- sum(topN.userlikes * topN.sim) / sum(topN.sim)
}
}
}
users.scores <- holder
# initialize user similarity matrix for 7 closest neighbours
holder <- matrix(NA,
nrow = nrow(mock_full),
ncol = ncol(mock_full) - 1,
dimnames = list((mock_full$user), colnames(mock_full[-1])))
for(i in 1:nrow(holder)) { # loop users
for(j in 1:ncol(holder)) { # look items
# extract user and item name
user <- rownames(holder)[i]
item <- colnames(holder)[j]
# remove items that the user has already liked
if (as.integer(mock_full[mock_full$user == user, item]) == 1)
holder[i,j] <- ""
else {
# get top N similar items to the item
topN <- ((head(n = TOPITEMS, (sim[order(sim[, item], decreasing=TRUE),][item]))))
topN.names <- as.character(rownames(topN))
topN.sim <- as.numeric(topN[,1])
# drop first column vector (same as item, diagonal line on sim matrix)
topN.sim <- topN.sim[-1]
topN.names < topN.names[-1]
# get all users for top N items
topN.likes <- mock_full[,c("user", topN.names)]
# filter for just the current user (in current row)
topN.userlikes <- topN.likes[topN.likes$user == user, ]
topN.userlikes <- as.numeric(topN.userlikes[!(names(topN.userlikes) %in% c("user"))])
# calculate score of items liked by users and top N items similar to item
holder[i,j] <- sum(topN.userlikes * topN.sim) / sum(topN.sim)
}
}
}
users.scores <- holder
View(users.scores)
finalrecs.method1 <- matrix(NA,
nrow = nrow(users.scores),
ncol = 100,
dimnames = list(rownames(users.scores)))
for(i in 1:nrow(users.scores))
finalrecs.method1[i,] <- names(head(n = 100,(users.scores[,order(users.scores[i,], decreasing=TRUE)])[i,]))
View(finalrecs.method1)
finalsrecs.method1 <- as.data.frame(finalsrecs.method1)
finalrecs.method1 <- as.data.frame(finalrecs.method1)
View(finalrecs.method1)
write.csv(finalrecs.method1, file="results\method1.csv" , row.names = FALSE)
write.csv(finalrecs.method1, file="results/method1.csv" , row.names = FALSE)
setwd("D:/Github/App_Foxee_RecSystem")
# load mock CF data
mock_full <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
library(tidyr, warn.conflicts=FALSE, quietly=TRUE)
library(readr, warn.conflicts=FALSE, quietly=TRUE)
library(dplyr, warn.conflicts=FALSE, quietly=TRUE)
# --------------------------------------------
setwd("D:/Github/App_Foxee_RecSystem")
# load mock CF data
mock_full <- tbl_df(read.csv("data/mock.csv", stringsAsFactors=FALSE))
# remove user column
mock <- subset(mock_full, select = -user)
# initialize item-item similarity matrix
sim  <- matrix(NA,
nrow = ncol(mock),
ncol = ncol(mock),
dimnames = list(colnames(mock),colnames(mock))
)
# convert to matrix for faster column dot product operations than df
mock <- as.matrix(mock)
# loop all column vectors and perform euclidean dot product
for(i in 1:ncol(mock)) {
for(j in 1:ncol(mock)) {
# sim[i,j] <- getCos(as.matrix(mock[i]),as.matrix(mock[j]))
sim[i,j] <- mock[,i] %*% mock[,j] / sqrt(mock[,i] %*% mock[,i] * mock[,j] %*% mock[,j])
}
}
# convert to dataframe
mock <- as.data.frame(mock)
sim <- as.data.frame(sim)
# number of similar items to extract
TOPITEMS <- 8
# initialize item similarity matrix for top N closest neighbours
items.topN <- matrix(NA,
nrow = ncol(sim),
ncol = TOPITEMS,
dimnames = list(colnames(sim)))
# loop through all items, order item rows by similarity, take top N rows
for(i in 1:ncol(mock))
items.topN[i,] <- (t(head(n = TOPITEMS,rownames(sim[order(sim[,i], decreasing=  TRUE),][i]))))
# initialize user similarity matrix for 7 closest neighbours
holder <- matrix(NA,
nrow = nrow(mock_full),
ncol = ncol(mock_full) - 1,
dimnames = list((mock_full$user), colnames(mock_full[-1])))
for(i in 1:nrow(holder)) { # loop users
for(j in 1:ncol(holder)) { # look items
# extract user and item name
user <- rownames(holder)[i]
item <- colnames(holder)[j]
# remove items that the user has already liked
if (as.integer(mock_full[mock_full$user == user, item]) == 1)
holder[i,j] <- ""
else {
# get top N similar items to the item
topN <- ((head(n = TOPITEMS, (sim[order(sim[, item], decreasing=TRUE),][item]))))
topN.names <- as.character(rownames(topN))
topN.sim <- as.numeric(topN[,1])
# drop first column vector (same as item, diagonal line on sim matrix)
topN.sim <- topN.sim[-1]
topN.names < topN.names[-1]
# get all users for top N items
topN.likes <- mock_full[,c("user", topN.names)]
# filter for just the current user (in current row)
topN.userlikes <- topN.likes[topN.likes$user == user, ]
topN.userlikes <- as.numeric(topN.userlikes[!(names(topN.userlikes) %in% c("user"))])
# calculate score of items liked by users and top N items similar to item
holder[i,j] <- sum(topN.userlikes * topN.sim) / sum(topN.sim)
}
}
}
users.scores <- holder
# create final recommendation df with item names
finalrecs.method1 <- matrix(NA,
nrow = nrow(users.scores),
ncol = 100,
dimnames = list(rownames(users.scores)))
for(i in 1:nrow(users.scores))
finalrecs.method1[i,] <- names(head(n = 100,(users.scores[,order(users.scores[i,], decreasing=TRUE)])[i,]))
# convert to df
finalrecs.method1 <- as.data.frame(finalrecs.method1)
finalrecs.method1
